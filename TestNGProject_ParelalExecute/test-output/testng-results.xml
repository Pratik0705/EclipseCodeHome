<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="3" passed="2">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="87" started-at="2020-03-30T12:50:28Z" finished-at="2020-03-30T12:50:28Z">
    <groups>
      <group name="a1">
        <method signature="cl2.cl2_methos()[pri:0, instance:p1.cl2@50675690]" name="cl2_methos" class="p1.cl2"/>
      </group> <!-- a1 -->
      <group name="test2">
        <method signature="prtTestNg.method2()[pri:0, instance:p1.prtTestNg@12bc6874]" name="method2" class="p1.prtTestNg"/>
      </group> <!-- test2 -->
      <group name="test1">
        <method signature="cl2.cl2_methos()[pri:0, instance:p1.cl2@50675690]" name="cl2_methos" class="p1.cl2"/>
        <method signature="prtTestNg.method1()[pri:0, instance:p1.prtTestNg@12bc6874]" name="method1" class="p1.prtTestNg"/>
      </group> <!-- test1 -->
    </groups>
    <test name="Default test" duration-ms="87" started-at="2020-03-30T12:50:28Z" finished-at="2020-03-30T12:50:28Z">
      <class name="p1.prtTestNg">
        <test-method status="PASS" signature="before_suite()[pri:0, instance:p1.prtTestNg@12bc6874]" name="before_suite" is-config="true" duration-ms="20" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_suite -->
        <test-method status="PASS" signature="before_test()[pri:0, instance:p1.prtTestNg@12bc6874]" name="before_test" is-config="true" duration-ms="1" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_test -->
        <test-method status="PASS" signature="before_class()[pri:0, instance:p1.prtTestNg@12bc6874]" name="before_class" is-config="true" duration-ms="1" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_class -->
        <test-method status="PASS" signature="before_method()[pri:0, instance:p1.prtTestNg@12bc6874]" name="before_method" is-config="true" duration-ms="17" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_method -->
        <test-method status="PASS" signature="method2()[pri:0, instance:p1.prtTestNg@12bc6874]" name="method2" duration-ms="5" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method2 -->
        <test-method status="PASS" signature="after_method()[pri:0, instance:p1.prtTestNg@12bc6874]" name="after_method" is-config="true" duration-ms="1" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_method -->
        <test-method status="PASS" signature="before_method()[pri:0, instance:p1.prtTestNg@12bc6874]" name="before_method" is-config="true" duration-ms="1" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_method -->
        <test-method status="PASS" signature="method1()[pri:0, instance:p1.prtTestNg@12bc6874]" name="method1" duration-ms="4" depends-on-groups="test2" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method1 -->
        <test-method status="PASS" signature="after_method()[pri:0, instance:p1.prtTestNg@12bc6874]" name="after_method" is-config="true" duration-ms="1" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_method -->
        <test-method status="PASS" signature="after_class()[pri:0, instance:p1.prtTestNg@12bc6874]" name="after_class" is-config="true" duration-ms="0" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_class -->
        <test-method status="PASS" signature="after_test()[pri:0, instance:p1.prtTestNg@12bc6874]" name="after_test" is-config="true" duration-ms="1" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_test -->
        <test-method status="PASS" signature="after_suite()[pri:0, instance:p1.prtTestNg@12bc6874]" name="after_suite" is-config="true" duration-ms="0" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_suite -->
      </class> <!-- p1.prtTestNg -->
      <class name="p1.cl2">
        <test-method status="FAIL" signature="cl2_methos()[pri:0, instance:p1.cl2@50675690]" name="cl2_methos" duration-ms="13" started-at="2020-03-30T18:20:28Z" finished-at="2020-03-30T18:20:28Z">
          <exception class="java.lang.IllegalAccessException">
            <message>
              <![CDATA[Class org.testng.internal.MethodInvocationHelper can not access a member of class p1.cl2 with modifiers "public"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalAccessException: Class org.testng.internal.MethodInvocationHelper can not access a member of class p1.cl2 with modifiers "public"
	at sun.reflect.Reflection.ensureMemberAccess(Unknown Source)
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(Unknown Source)
	at java.lang.reflect.AccessibleObject.checkAccess(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalAccessException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cl2_methos -->
      </class> <!-- p1.cl2 -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
